import json
import pykobo
import requests
import os
import pandas as pd

__location__ = os.path.realpath(
    os.path.join(os.getcwd(), os.path.dirname(__file__)))

config_data = []
with open(os.path.join(__location__, 'config.json'), 'r') as config_file:
    config_data = json.load(config_file)

URL_KOBO = config_data['kobo_api_url']
API_VERSION = config_data['kobo_api_version']
KOBO_TOKEN = config_data['kobo_token']
USERNAME = config_data['kobo_username']
IMPLEMENTATION_ACTIVITY_FORM_UID = config_data['kobo_implementation_activity_form_uid']


def fetch_kobo_data(url, token, api_version, form_uid): 

    # Initialize the Manager object
    km = pykobo.Manager(url=url, api_version=api_version, token=token)
    #Grab desired form
    try:
        kobo_form = km.get_form(form_uid)
    except:
        print("unable to get_form")
    print(kobo_form.metadata)

    #Get data associated with form
    try:
        kobo_form.fetch_data()
    except KeyError:
        print("Key Error warning - ignore")
    except:
        print("unable to fetch records")
    #Returns dataframe
    return kobo_form.data

def fetch_kobo_data_without_pykobo(url, token): 
    try:
        headers = {'Authorization': f'Token {token}'}
        response = requests.get(url, headers=headers)
        json_response = json.loads(response.text)
        #Keep all fields? Or get rid of Kobo autogenerated ones?
        pause = 'pause'
        records = [record for record in json_response['results']]
    except:
        print("Unable to fetch records")
    #Returns JSON list of objects
    return records

def main():
    impl_activity_form_data = fetch_kobo_data(URL_KOBO,KOBO_TOKEN,API_VERSION,IMPLEMENTATION_ACTIVITY_FORM_UID)
    impl_activity_form_data_nopykobo = fetch_kobo_data_without_pykobo(f'{URL_KOBO}api/v2/assets/{IMPLEMENTATION_ACTIVITY_FORM_UID}/data.json', KOBO_TOKEN)
    pause = 'test'

if __name__ == '__main__':
    main()